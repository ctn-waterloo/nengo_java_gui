<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="nengo-ui">
    <property environment="env"/>
    <property name="dir.simulator" value="../simulator"/>
	<property file="${dir.simulator}/build.properties"/>
	<path id="classpath.simulator">
        <pathelement location="${dir.simulator}/${dest.build}"/>
    	<fileset dir="${dir.simulator}/${src.lib}">
    		<include name="*.jar"/>
    		<exclude name="analysis/**"/>
    	</fileset>
	</path>
    <path id="classpath.simulator-ui">
    	<path refid="classpath.simulator"/>
    	<pathelement location="${dest.build}"/>
    	<fileset dir="${src.lib}">
    		<include name="*.jar"/>
    		<exclude name="analysis/**"/>
    	</fileset>
    </path>
	<path id="classpath.test">
		<path refid="classpath.simulator-ui"/>
		<pathelement location="${dest.test}"/>
		<fileset dir="${src.lib.analysis}">
			<include name="*.jar"/>
		</fileset>
	</path>
	<path id="classpath.cobertura">
		<fileset dir="${analysis.cobertura}">
			<include name="cobertura.jar"/>
			<include name="lib/**/*.jar"/>
		</fileset>
	</path>
	<path id="classpath.coveragetest">
		<pathelement location="${dest.instrumented}"/>
		<path refid="classpath.test"/>
		<path refid="classpath.cobertura"/>
	</path>
	
    <target name="init">
    	<mkdir dir="${dest.artifacts}"/>
        <mkdir dir="${dest.build}"/>
    	<mkdir dir="${dest.test}"/>
        <copy includeemptydirs="false" todir="${dest.build}">
            <fileset dir="${src.main}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="${dest.build}">
            <fileset dir="${src.resources}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="${dest.test}">
            <fileset dir="${src.test}">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    	<exec executable="svnversion" spawn="false" dir="${basedir}" outputproperty="buildnumber"/>
    </target>
	
    <target name="clean">
    	<delete dir="${dest.artifacts}"/>
        <delete dir="${dest.build}"/>
    	<delete dir="${dest.instrumented}"/>
    	<delete dir="${dest.test}"/>
    </target>
	
	<target description="Generate JavaDoc." name="javadoc">
		<mkdir dir="${dest.artifacts.javadoc}"/>
		<javadoc sourcepath="${src.main}" destdir="${dest.artifacts.javadoc}"
				 author="true" version="true" windowtitle="Nengo GUI API"/>
	</target>
	
    <target name="build-simulator">
        <ant dir="${dir.simulator}" inheritAll="false" target="build" />
    </target>
	
    <target description="Build simulator-ui. Produces .class files in the ${dest.build} directory."
			depends="init,build-simulator" name="build">
    	<!-- Path testing
    	<pathconvert property="simpath" pathsep="${line.separator}          " refid="classpath.simulator-ui" />
    	<echo message="${simpath}" />
    		Path testing -->
        <javac debug="true" debuglevel="${java.debuglevel}" destdir="${dest.build}" source="${java.source}" target="${java.target}">
            <src path="${src.main}"/>
            <classpath refid="classpath.simulator-ui"/>
        	<compilerarg value="-Xlint"/>
        </javac>
	</target>
	
    <target description="Run JUnit tests and produce reports."
			depends="init,build" name="test">
    	<!-- Path testing
    	<pathconvert property="testpath" pathsep="${line.separator}          " refid="classpath.test" />
    	<echo message="${testpath}" />
			Path testing -->
		<delete dir="${dest.artifacts.junit.xml}"/>
		<delete dir="${dest.artifacts.junit.html}"/>
		<mkdir dir="${dest.artifacts.junit.xml}"/>
		<mkdir dir="${dest.artifacts.junit.html}"/>
		<javac debug="true" debuglevel="${java.debuglevel}" destdir="${dest.test}" source="${java.source}" target="${java.target}">
	        <src path="${src.test}"/>
            <classpath refid="classpath.test"/>
			<compilerarg value="-Xlint"/>
        </javac>
		<junit fork="yes" printsummary="no" haltonfailure="no">
			<batchtest fork="yes" todir="${dest.artifacts.junit.xml}" >
				<fileset dir="${dest.test}">
			    	<include name="**/*Test.class" />
			    </fileset>
			</batchtest>
			<formatter type="xml"/>
			<classpath refid="classpath.test"/>
		</junit>
		<junitreport todir="${dest.artifacts.junit.html}">
			<fileset dir="${dest.artifacts.junit.xml}">
		    	<include name="TEST-*.xml" />
		    </fileset>
		    <report todir="${dest.artifacts.junit.html}" />
		</junitreport>
    </target>
	
	<target description="Run the FindBugs code analysis tool."
		depends="init,build" name="findbugs">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
			classpath="${analysis.findbugs}/lib/findbugs-ant.jar"/>
		<mkdir dir="${dest.artifacts.analysis}"/>
		
		<findbugs home="${analysis.findbugs}" output="xml:withMessages"
				reportLevel="low" effort="max" jvmargs="-Xms100m -Xmx800m"
				outputFile="${dest.artifacts.analysis}/findbugs.xml">
	    	<sourcePath path="${src.main}"/>
	    	<class location="${dest.build}"/>
			<auxClasspath refid="classpath.simulator-ui"/>
	    </findbugs>
		<findbugs home="${analysis.findbugs}" output="xml:withMessages"
				reportLevel="low" effort="max" jvmargs="-Xms100m -Xmx800m"
				outputFile="${dest.artifacts.analysis}/findbugs-test.xml">
	    	<sourcePath path="${src.test}"/>
	    	<class location="${dest.test}"/>
			<auxClasspath refid="classpath.test"/>
	    </findbugs>
	</target>
	
	<target description="Run the Copy-Paste Detector code analysis tool." name="cpd">
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"
			classpath="${analysis.pmd}/lib/pmd-4.2.5.jar"/>
		<mkdir dir="${dest.artifacts.analysis}"/>
		<cpd minimumTokenCount="100" format="xml"
			outputFile="${dest.artifacts.analysis}/cpd.xml">
		    <fileset dir="${src.main}">
		        <include name="**/*.java"/>
		    </fileset>
		</cpd>
		<cpd minimumTokenCount="100" format="xml"
			outputFile="${dest.artifacts.analysis}/cpd-test.xml">
		    <fileset dir="${src.test}">
		        <include name="**/*.java"/>
		    </fileset>
		</cpd>
	</target>
	
	<target description="Run the PMD code analysis tool." name="pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
			classpath="${analysis.pmd}/lib/pmd-4.2.5.jar"/>
		<mkdir dir="${dest.artifacts.analysis}"/>
		<pmd rulesetfiles="basic,braces,clone,codesize,controversial,coupling,design,finalizers,imports,logging-java,naming,optimizations,strictexception,strings,sunsecure,typeresolution,unusedcode">
			<formatter type="xml" toFile="${dest.artifacts.analysis}/pmd.xml"/>
			<fileset dir="${src.main}">
				<include name="**/*.java"/>
			</fileset>
	    </pmd>
		<pmd rulesetfiles="basic,braces,clone,codesize,controversial,coupling,design,finalizers,imports,junit,logging-java,naming,optimizations,strictexception,strings,sunsecure,typeresolution,unusedcode">
			<formatter type="xml" toFile="${dest.artifacts.analysis}/pmd-test.xml"/>
			<fileset dir="${src.test}">
				<include name="**/*.java"/>
			</fileset>
	    </pmd>
	</target>
	
	<target description="Run the CheckStyle analysis tool." name="checkstyle">
		<taskdef resource="checkstyletask.properties"
			classpath="${analysis.checkstyle}/checkstyle-all-5.1.jar"/>
		<mkdir dir="${dest.artifacts.analysis}"/>
		
		<checkstyle config="${analysis.checkstyle}/sun_checks.xml" failOnViolation="false">
			<formatter type="xml" tofile="${dest.artifacts.analysis}/checkstyle.xml"/>
			<fileset dir="${src.main}">
				<include name="**/*.java"/>
			</fileset>
		</checkstyle>
		<checkstyle config="${analysis.checkstyle}/sun_checks.xml" failOnViolation="false">
			<formatter type="xml" tofile="${dest.artifacts.analysis}/checkstyle-test.xml"/>
			<fileset dir="${src.test}">
				<include name="**/*.java"/>
			</fileset>
		</checkstyle>
	</target>
	
	<target description="Do unit testing and generate Cobertura code coverage reports."
		depends="init,build" name="cobertura">
		<taskdef classpathref="classpath.cobertura" resource="tasks.properties" />
		
		<delete dir="${dest.artifacts.junit.xml}"/>
		<delete file="${basedir}/cobertura.ser" />
		<delete dir="${dest.instrumented}"/>
		<mkdir dir="${dest.artifacts.analysis}"/>
		<mkdir dir="${dest.artifacts.junit.xml}"/>
		<mkdir dir="${dest.artifacts.cobertura}"/>
		<mkdir dir="${dest.instrumented}"/>
		
		<javac debug="true" debuglevel="${java.debuglevel}" destdir="${dest.test}" source="${java.source}" target="${java.target}">
	        <src path="${src.test}"/>
            <classpath refid="classpath.test"/>
			<compilerarg value="-Xlint"/>
        </javac>
		<cobertura-instrument todir="${dest.instrumented}">
			<includeClasses regex="ca.nengo.ui.*"/>
			<instrumentationClasspath>
				<path refid="classpath.simulator-ui" />
			</instrumentationClasspath>
		</cobertura-instrument>
		<junit fork="yes" forkmode="once" printsummary="no" haltonfailure="no" maxmemory="1024m">
			<sysproperty key="net.sourceforge.cobertura.datafile" value="${basedir}/cobertura.ser"/>
			<formatter type="xml"/>
			<classpath refid="classpath.coveragetest"/>
			<batchtest todir="${dest.artifacts.junit.xml}" >
				<fileset dir="${dest.test}">
			    	<include name="**/*Test.class" />
			    </fileset>
			</batchtest>
		</junit>
		<cobertura-report format="xml" destdir="${dest.artifacts.analysis}" srcdir="${src.main}" />
		<cobertura-report format="html"	destdir="${dest.artifacts.cobertura}" srcdir="${src.main}" />
		<delete file="${basedir}/cobertura.ser"/>
	</target>
	
	<target description="Generate all artifacts: javadoc, junit tests, FindBugs, CPD, PMD, CheckStyle, and Cobertura." name="all"
		depends="javadoc,test,findbugs,cpd,pmd,checkstyle,cobertura" />

	<target description="Create a distribution folder."
		depends="build" name="dist">
		<property name="dist.dir" value="../nengo-${buildnumber}"/>
		<ant dir="${dir.simulator}" inheritAll="false" target="javadoc" />
		<copy includeemptydirs="false" todir="${dest.build}">
	        <fileset dir="${dir.simulator}/${dest.build}">
	            <exclude name="**/*.launch"/>
	            <exclude name="**/*.java"/>
	        </fileset>
	    </copy>
		<delete dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${dist.dir}/nengo-${buildnumber}.jar" basedir="${dest.build}">
	    	<manifest>
		    	<attribute name="Main-Class" value="ca.nengo.ui.NengoGraphics" />
			  	<attribute name="Built-By" value="${user.name}"/>
			  	<attribute name="Implementation-Vendor" value="Centre for Theoretical Neuroscience @ UWaterloo"/>
			  	<attribute name="Implementation-Title" value="Nengo Graphical Simulator"/>
			  	<attribute name="Implementation-Version" value="Build ${buildnumber}"/>
	    	</manifest>
		</jar>
		<mkdir dir="${dist.dir}/api"/>
		<mkdir dir="${dist.dir}/api/docs"/>
		<mkdir dir="${dist.dir}/api/src"/>
		<copy includeemptydirs="false" todir="${dist.dir}/api/docs">
			<fileset dir="${dir.simulator}/${dest.artifacts.javadoc}"/>
		</copy>
		<copy includeemptydirs="false" todir="${dist.dir}/api/src">
			<fileset dir="${dir.simulator}/${src.main}"/>
		</copy>
		<copy includeemptydirs="false" todir="${dist.dir}">
			<fileset dir=".">
				<include name="external/**"/>
				<include name="images/**"/>
				<include name="python/**"/>
				<include name="${src.lib}/**"/>
				<exclude name="${src.lib.analysis}/**"/>
			</fileset>
			<fileset dir="${dir.simulator}">
				<include name="${src.lib}/**"/>
				<exclude name="${src.lib.analysis}/**"/>
			</fileset>
			<fileset dir="${src.dist}"/>
		</copy>
		<replace dir="${dist.dir}" token="BUILDNUMBER" value="${buildnumber}">
			<include name="nengo"/>
			<include name="nengo.bat"/>
		</replace>
		<chmod perm="a+x" verbose="true">
			<fileset dir="${dist.dir}">
				<include name="nengo"/>
				<include name="external/pseudoInverse"/>
			</fileset>
		</chmod>
	</target>
</project>
